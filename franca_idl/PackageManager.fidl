// (c) 2015,2016 - Jaguar Land Rover.
//
// Mozilla Public License 2.0
//
// GENIVI Software Management IDL
//

// Abbreviations:
// SC - SOTA CLient
// SWLM - Software Loading Manager
// ML - Module Loader (one instance per external module)
// PackMgr - Package Manager
// PartMgr - Partition Manager
// HMI - Human Machine Interface (IVI screen)
// CEDM - Consumer Electronics Device Manager
// LocMedMgr - Local Media Manager


package org.genivi.swm

<** @description: 
Package Manager API
**>
interface PackageManager {
	version { major 1 minor 0 }

	<** 
	@description: 
	Start the installation of a package using an image available
	on local storage.
	**>
	method installPackage {
		in {
			<** @description:
			The transaction ID to send back with the operation_result()
			message that reports the outcome of the package installation.
			**>
			String transactionId

			<** @description:
			The local file system path to the image to be forwarded
			to the native package manager for installation
			**>
			String imagePath

			<** @description:
			A list of package IDs that are not to be installed
			**>
			array blacklistedPackages of String
		}

	}

	<** 
	@description: 
	Start the upgrade of a previously installed package
	**>
	method upgradePackage {
		in {
			<** @description:
			The transaction ID to send back with the operation_result()
			message that reports the outcome of the package installation.
			**>
			String transactionId

			<** @description:
			The local file system path to the image to be forwarded
			to the native package manager for the upgrade operation
			**>
			String image

			<** @description:
			A list of package IDs that are not to be installed
			**>
			array blacklistedPackages of String

			<** @description:
			Are we allowed to install an older version of the package
			than the one currently installed?
			**>
			Boolean allowDowngrade
		}
	}

	<** 
	@description: 
	Start the removal of a previously installed package
	**>
	method removePackage {
		in {
			<** @description:
			The transaction ID to send back with the operation_result()
			message that reports the outcome of the package removal.
			**>
			String transactionId

			<** @description:
			The id of the package to remove.
			**>
			String packageId
		}
	}

	<** @description:
	Retrieve all installed packages.
	**>
	method getInstalledPackages {
		out {
			<** @description: 
			All installed packages. 

			FIXME: Move InstalledPackage struct to include file?

			**>
			array installedPackages of InstalledPackage
		}
	}
}
