// (c) 2015 - Jaguar Land Rover.
//
// Mozilla Public License 2.0
//
// GENIVI Software Management IDL
//

// Abbreviatioms:
// SC - SOTA CLient
// SWLM - Software Loading Manager
// ML - Module Loader (one instance per external module)
// PackMgr - Package Manager
// PartMgr - Partition Manager
// HMI - Human Machine Interface (IVI screen)
// CEDM - Consumer Electronics Device Manager

// FIXME: CEDM Interface compliance
// FIXME: Enumerated update operation result codes

package org.genivi.swm

<** @description: Error codes returned by operation_result.**>
enumeration SWMResult {
	<** @description: Operation executed successfully **>
	SWM_RES_OK = "0"  

	<** @description: Operation has already been processed **>
	SWM_RES_ALREADY_PROCESSED = "1"

	<** @description: Dependency failure during package install, upgrade, or removal **>
	SWM_RES_DEPENDENCY_FAILURE = "2"

	<** @description: Update image integrity has been compromised **>
	SWM_RES_VALIDATION_FAILED = "3"

	<** @description: Package installation failed **>
	SWM_RES_INSTALL_FAILED = "4"

	<** @description: Package upgrade failed **>
	SWM_RES_UPGRADE_FAILED = "5"

	<** @description: Package removal failed **>
	SWM_RES_REMOVAL_FAILED = "6"

	<** @description: The module loader could not flash its managed module **>
	SWM_RES_FLASH_FAILED = "7"

	<** @description: Partition creation failed **>
	SWM_RES_CREATE_PARTITION_FAILED = "8"

	<** @description: Partition deletion failed **>
	SWM_RES_DELETE_PARTITION_FAILED = "9"

	<** @description: Partition resize failed **>
	SWM_RES_RESIZE_PARTITION_FAILED = "10"

	<** @description: Partition write failed **>
	SWM_RES_WRITE_PARTITION_FAILED = "11"

	<** @description: Partition patching failed **>
	SWM_RES_PATCH_PARTITION_FAILED = "12"

	<** @description: User declined the update **>
	SWM_RES_USER_DECLINED = "13"
	
	<** @description: Software was blacklisted **>
	SWM_RES_SOFTWARE_BLACKLISTED = "14"

	<** @description: Ran out of disk space **>
	SWM_RES_DISK_FULL = "15"

	<** @description: Software package not found **>
	SWM_RES_NOT_FOUND = "16"

	<** @description: Tried to downgrade to older version **>
	SWM_RES_OLD_VERSION = "17"

	<** @description: SWM Internal integrity error **>
	SWM_RES_INTERNAL_ERROR = "18"

	<** @description: Other error **>
	SWM_RES_GENERAL_ERROR = "19"
}


<** @description: Software Loading Manager interfaace
**>
interface swlm {
	version { major 1 minor 0 }

	<** 
	@description: 
	Message, sent by SC or DiagTollMgr to SWLM, to inform that a new
    package is available for download.
	This is a fire and forget message. If the update is to be downloaded,
	org.genivi.si.swm.sc.initiate_download() will be called. 
	**>
	method update_available {
		in {
			<** @description:
			Package ID of update. Not currently used.
			**>
			String update_id

			<** @description: 
			A descriptive text of the available update.
			**>
			String description

			<** @description:
			Signature generated on update_id using: 
			echo $UPDATE_ID | openssl dgst -sha256 -sign private_key | base64 
			**>
			String signature

			<** @description:
			Flag to indicate if a user confirmation of the package is required.
			**>
			Boolean request_confirmation

			<** @description: 
			The size of the available update, in bytes.
			**>
			UInt64 size

			<** @description: 
			A symbolic name of the available update.
			**>
			String name
		}
	}

	<** 
	@description: 
	Message, sent by SC to SWLM, to indicate
	that a download previously initiated by a
	**>
	method download_complete {
		in {
			<** @description:
			Path on the local file system to the squashfs image
			containing the update
			**>
			String update_image


			<** @description: 
			The RSA signature of the SHA256SUM digest of the
			image stored in 'image_path'
			Generated by: 
			openssl dgst -sha256 -sign priv_key.pem $image_path | base64 
			**>
			String signature
		}
	}

	<** 
	@description: 
	Message, sent by HMI to SWLM to specify
	if a user confirmed or declined an update notified to HMI through a
	org.genivi.si.swm.hmi.update_notificataion() call.
	**>
	method update_confirmation {
		in {
			<** @description: 
			Update_id originally provided by SWLM when it
			invoked update_available() on HMI
			**>
			UInt32 update_id

			<** @description: 
			Approved or declined
			**>
			Boolean approved
		}
	}

	<** 
	@description: 
	Abort a download in progress.
	Invoked by HMI in response to SWLM in response to a user abort.
	Will be forwarded by SWLM to SC in order to complete the abort.
	**>
	method abort_download {
		in {
			<** @description:
			Package ID of update to abort..
			The value was previously provided to an update_notification() call 
			made from SWLM to HMI.
			**>
			String update_id
		}
	}

	<** 
	@description:
	Message, sent by other components to SWLM to report the result
	of an update operation initiated by a previous
	call to one of the following methods:
	org.genivi.si.swm.packmgr.install_package()
	org.genivi.si.swm.packmgr.upgrade_package()
	org.genivi.si.swm.packmgr.remove_package()
	org.genivi.si.swm.partmgr.create_disk_partition()
	org.genivi.si.swm.packmgr.delete_disk_partition()
	org.genivi.si.swm.packmgr.resize_disk_partition()
	org.genivi.si.swm.packmgr.write_disk_partition()
	org.genivi.si.swm.packmgr.patch_disk_partition()
	org.genivi.si.[ml].packmgr.flash_firmware_version()
	**>
	method operation_result {
		in {
			<** @description: 
			Original transaction ID provided as an argument to 
			the update operation call that generated this result.
			**>
			UInt32 transaction_id
			<** @description: 
			The enumerated result code of the operation
			**>
			SWMResult result_code
			<** @description: 
			A descriptive text of the operation result
			**>
			String result_text
		}
	}

	<** @description:
	Message, sent by CEDM or SC to SWLM to retrieve a
	list of installed software packages and/or module
	firmware versions.
	**>
	method get_installed_software {
		in {
			<** @description: 
			Retrieve installed package versions from PackMgr
			**>
			Boolean include_packages

			<** @description: 
			Retrieve firmware versions from all ML
			**>
			Boolean include_module_firmware
		}
		out {
			<** @description: 
			All installed packages. 
			Empty if include_packages is false
			**>
			array installed_packages of InstalledPackage
			<** @description: 
			All installed module firmwares.
			Empty if include_module_firmware is false
			**>
			array installed_firmware of InstalledFirmware
		}
	}

	<** @description:
	A single element inside the list of packages returned by the
	get_installed_software method.
	**>
	struct InstalledPackage {
		<** @description: 
		The ID string of the installed package.
		**>
		String package_id

		<** @description: 
		A symbolic name of the installed package
		**>
		String name

		<** @description: 
		A descriptive text of the installed package
		**>
		String description

		<** @description: 
		The unix time stamp of when the package was installed
		or last updated.
		**>
		UInt64 last_modified
	}

	<** @description:
	A single element inside the list of firmwares returned by the
	get_installed_software method.
	**>
	struct InstalledFirmware {
		<** @description: 
		The name of the module that has firmware installed
		**>
		String module

		<** @description:
		The version id string for the currently installed 
		firmware.
		**>
		String firmware_id


		<** @description: 
		The unix time stamp of when the module was flashed
		with the given firmware version
		**>
		UInt64 last_modified
	}
}
